{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "ProjectSampleADF"
		},
		"AzureBlobStoragedatastage_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureBlobStoragedatastage'"
		},
		"AzureBlobStorageforonlinedata_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureBlobStorageforonlinedata'"
		},
		"AzureSqlDatabaseCFG_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureSqlDatabaseCFG'"
		},
		"FileServerlocal_password": {
			"type": "secureString",
			"metadata": "Secure string for 'password' of 'FileServerlocal'"
		},
		"SqlServerlocalDB_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'SqlServerlocalDB'"
		},
		"SqlServerlocalDB_password": {
			"type": "secureString",
			"metadata": "Secure string for 'password' of 'SqlServerlocalDB'"
		},
		"FileServerlocal_properties_typeProperties_host": {
			"type": "string",
			"defaultValue": "\\\\DESKTOP-JOS5LPK\\Data"
		},
		"FileServerlocal_properties_typeProperties_userId": {
			"type": "string",
			"defaultValue": "Line"
		},
		"SqlServerlocalDB_properties_typeProperties_userName": {
			"type": "string",
			"defaultValue": "LINE"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/AzureBlobStoragedatastage')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('AzureBlobStoragedatastage_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureBlobStorageforonlinedata')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('AzureBlobStorageforonlinedata_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlDatabaseCFG')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('AzureSqlDatabaseCFG_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/integrationRuntimelocalSQL')]",
			"type": "Microsoft.DataFactory/factories/integrationRuntimes",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "SelfHosted",
				"typeProperties": {}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlTablelinkservice')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabaseCFG",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": "cfg"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabaseCFG')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Datastagelinkservice')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStoragedatastage",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"filename": {
						"type": "string",
						"defaultValue": "demo"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@dataset().filename",
							"type": "Expression"
						},
						"container": "datastage"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStoragedatastage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/FileServerlocal')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "FileServer",
				"typeProperties": {
					"host": "[parameters('FileServerlocal_properties_typeProperties_host')]",
					"userId": "[parameters('FileServerlocal_properties_typeProperties_userId')]",
					"password": {
						"type": "SecureString",
						"value": "[parameters('FileServerlocal_password')]"
					}
				},
				"connectVia": {
					"referenceName": "integrationRuntimelocalSQL",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/integrationRuntimelocalSQL')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SqlServerlocalDB')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "SqlServer",
				"typeProperties": {
					"connectionString": "[parameters('SqlServerlocalDB_connectionString')]",
					"userName": "[parameters('SqlServerlocalDB_properties_typeProperties_userName')]",
					"password": {
						"type": "SecureString",
						"value": "[parameters('SqlServerlocalDB_password')]"
					}
				},
				"connectVia": {
					"referenceName": "integrationRuntimelocalSQL",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/integrationRuntimelocalSQL')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Customer_CSV')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStoragedatastage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "Customer.CSV",
						"container": "datastage"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "customer_Id",
						"type": "String"
					},
					{
						"name": "DOB",
						"type": "String"
					},
					{
						"name": "Gender",
						"type": "String"
					},
					{
						"name": "city_code",
						"type": "String"
					},
					{
						"name": "Customer_Name",
						"type": "String"
					},
					{
						"name": "Created_Modified_Date",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStoragedatastage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DimCustomer')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabaseCFG",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "customer_key",
						"type": "int",
						"precision": 10
					},
					{
						"name": "customer_Id",
						"type": "int",
						"precision": 10
					},
					{
						"name": "customer_name",
						"type": "varchar"
					},
					{
						"name": "DOB",
						"type": "varchar"
					},
					{
						"name": "city_code",
						"type": "varchar"
					},
					{
						"name": "gender",
						"type": "varchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "dim_customer"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabaseCFG')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dimproductCate')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStoragedatastage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "Product-Category-Subcategory.Csv",
						"container": "datastage"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "prod_cat_code",
						"type": "String"
					},
					{
						"name": "prod_cat",
						"type": "String"
					},
					{
						"name": "prod_sub_cat_code",
						"type": "String"
					},
					{
						"name": "prod_subcat",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStoragedatastage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DimProductCat')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabaseCFG",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "Prod_Cat_SubCat_Key",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Product_Cat_Code",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Product_Category",
						"type": "varchar"
					},
					{
						"name": "Product_SubCat_Code",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Product_SubCategory",
						"type": "varchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "Dim_product_Cat_SubCat"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabaseCFG')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DimstoreDS')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStoragedatastage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "Transactions.CSV",
						"container": "datastage"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "transaction_id",
						"type": "String"
					},
					{
						"name": "cust_id",
						"type": "String"
					},
					{
						"name": "tran_date",
						"type": "String"
					},
					{
						"name": "prod_subcat_code",
						"type": "String"
					},
					{
						"name": "prod_cat_code",
						"type": "String"
					},
					{
						"name": "Qty",
						"type": "String"
					},
					{
						"name": "Rate",
						"type": "String"
					},
					{
						"name": "Tax",
						"type": "String"
					},
					{
						"name": "total_amt",
						"type": "String"
					},
					{
						"name": "Store_type",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStoragedatastage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DimStore')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabaseCFG",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "Store_Key",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Store_Type",
						"type": "varchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "Dim_Store"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabaseCFG')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Localfile')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "FileServerlocal",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "FileServerLocation",
						"fileName": "Product-Category-Subcategory.csv"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "prod_cat_code",
						"type": "String"
					},
					{
						"name": "prod_cat",
						"type": "String"
					},
					{
						"name": "prod_sub_cat_code",
						"type": "String"
					},
					{
						"name": "prod_subcat",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/FileServerlocal')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Localfilesource')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "FileServerlocal",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "FileServerLocation",
						"fileName": "005 Product-Category-Subcategory.csv"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "prod_cat_code",
						"type": "String"
					},
					{
						"name": "prod_cat",
						"type": "String"
					},
					{
						"name": "prod_sub_cat_code",
						"type": "String"
					},
					{
						"name": "prod_subcat",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/FileServerlocal')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SqlServerlocalDB')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SqlServerlocalDB",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [
					{
						"name": "customer_Id",
						"type": "int",
						"precision": 10
					},
					{
						"name": "DOB",
						"type": "date"
					},
					{
						"name": "Gender",
						"type": "nvarchar"
					},
					{
						"name": "city_code",
						"type": "nvarchar"
					},
					{
						"name": "Customer_Name",
						"type": "nvarchar"
					},
					{
						"name": "Created_Modified_Date",
						"type": "datetime2",
						"scale": 7
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "Customer"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/SqlServerlocalDB')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflow1')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Datastagelinkservice",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "AzureSqlTablelinkservice",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "aggregate1"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "alterRow1"
						}
					],
					"scriptLines": [
						"parameters{",
						"     watermark_feild as string,",
						"     sourcetable as string",
						"}",
						"source(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     wildcardPaths:[($sourcetable)]) ~> source1",
						"source1 aggregate(Max_Aggragate = iif(toString($sourcetable) == 'Customer.Csv',\r",
						"max(toTimestamp(toString(byName($watermark_feild)),\r",
						"'dd-MM-yyyy HH:mm')),\r",
						"max(toTimestamp(byName($watermark_feild),'dd-MM-yyyy')))) ~> aggregate1",
						"aggregate1 derive(Dest_Table = $sourcetable) ~> derivedColumn1",
						"derivedColumn1 alterRow(updateIf(isNull(Max_Aggragate)==false())) ~> alterRow1",
						"alterRow1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:false,",
						"     updateable:true,",
						"     upsertable:false,",
						"     keys:['Dest_Table'],",
						"     skipKeyWrites:true,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     saveOrder: 1,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          Dest_Table,",
						"          Watermark_Value = Max_Aggragate",
						"     )) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Datastagelinkservice')]",
				"[concat(variables('factoryId'), '/datasets/AzureSqlTablelinkservice')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CustomerDataflow')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Customer_CSV",
								"type": "DatasetReference"
							},
							"name": "CustomerStageing"
						},
						{
							"dataset": {
								"referenceName": "DimCustomer",
								"type": "DatasetReference"
							},
							"name": "DimCustomer"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DimCustomer",
								"type": "DatasetReference"
							},
							"name": "sink1"
						},
						{
							"dataset": {
								"referenceName": "DimCustomer",
								"type": "DatasetReference"
							},
							"name": "sink2"
						}
					],
					"transformations": [
						{
							"name": "exists1"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "exists2"
						},
						{
							"name": "derivedColumn2"
						},
						{
							"name": "alterRow1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          customer_Id as string,",
						"          DOB as string,",
						"          Gender as string,",
						"          city_code as string,",
						"          Customer_Name as string,",
						"          Created_Modified_Date as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> CustomerStageing",
						"source(output(",
						"          customer_key as integer,",
						"          customer_Id as integer,",
						"          customer_name as string,",
						"          DOB as string,",
						"          city_code as string,",
						"          gender as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> DimCustomer",
						"CustomerStageing, DimCustomer exists(toInteger(CustomerStageing@customer_Id) == DimCustomer@customer_Id,",
						"     negate:true,",
						"     broadcast: 'auto')~> exists1",
						"exists1 derive(customer_Id = toInteger(customer_Id)) ~> derivedColumn1",
						"CustomerStageing, DimCustomer exists(toInteger(CustomerStageing@customer_Id) == DimCustomer@customer_Id,",
						"     negate:false,",
						"     broadcast: 'auto')~> exists2",
						"exists2 derive(customer_Id = toInteger(customer_Id)) ~> derivedColumn2",
						"derivedColumn2 alterRow(updateIf(true())) ~> alterRow1",
						"derivedColumn1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          customer_key as integer,",
						"          customer_Id as integer,",
						"          customer_name as string,",
						"          DOB as string,",
						"          city_code as string,",
						"          gender as string",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          customer_Id,",
						"          customer_name = Customer_Name,",
						"          DOB,",
						"          city_code,",
						"          gender = Gender",
						"     )) ~> sink1",
						"alterRow1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          customer_key as integer,",
						"          customer_Id as integer,",
						"          customer_name as string,",
						"          DOB as string,",
						"          city_code as string,",
						"          gender as string",
						"     ),",
						"     deletable:false,",
						"     insertable:false,",
						"     updateable:true,",
						"     upsertable:false,",
						"     keys:['customer_Id'],",
						"     skipKeyWrites:true,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          customer_Id,",
						"          customer_name = Customer_Name,",
						"          DOB,",
						"          city_code,",
						"          gender = Gender",
						"     )) ~> sink2"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Customer_CSV')]",
				"[concat(variables('factoryId'), '/datasets/DimCustomer')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflow2')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "dimproductCate",
								"type": "DatasetReference"
							},
							"name": "source1"
						},
						{
							"dataset": {
								"referenceName": "DimProductCat",
								"type": "DatasetReference"
							},
							"name": "source2"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DimProductCat",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "exists1"
						},
						{
							"name": "derivedColumn1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          prod_cat_code as string,",
						"          prod_cat as string,",
						"          prod_sub_cat_code as string,",
						"          prod_subcat as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> source1",
						"source(output(",
						"          Prod_Cat_SubCat_Key as integer,",
						"          Product_Cat_Code as integer,",
						"          Product_Category as string,",
						"          Product_SubCat_Code as integer,",
						"          Product_SubCategory as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> source2",
						"source1, source2 exists(toInteger(prod_cat_code) == Product_Cat_Code",
						"     && toInteger(prod_sub_cat_code) == Product_SubCat_Code,",
						"     negate:true,",
						"     broadcast: 'auto')~> exists1",
						"exists1 derive(prod_cat_code = toInteger(prod_cat_code),",
						"          prod_sub_cat_code = toInteger(prod_sub_cat_code)) ~> derivedColumn1",
						"derivedColumn1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Prod_Cat_SubCat_Key as integer,",
						"          Product_Cat_Code as integer,",
						"          Product_Category as string,",
						"          Product_SubCat_Code as integer,",
						"          Product_SubCategory as string",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          Product_Cat_Code = prod_cat_code,",
						"          Product_Category = prod_cat,",
						"          Product_SubCat_Code = prod_sub_cat_code,",
						"          Product_SubCategory = prod_subcat",
						"     )) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/dimproductCate')]",
				"[concat(variables('factoryId'), '/datasets/DimProductCat')]"
			]
		}
	]
}